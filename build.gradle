buildscript {
    repositories {
        mavenCentral()
        mavenLocal()
        google()
        maven { url = 'https://maven.minecraftforge.net' }
        maven {url "https://plugins.gradle.org/m2/"}
        maven { url = 'https://maven.parchmentmc.org' }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.parchmentmc:librarian:1.+'
        classpath "gradle.plugin.com.github.johnrengelman:shadow:7.1.2"
    }
}
repositories {
    mavenCentral()
}
apply plugin: 'java'
apply plugin: "com.github.johnrengelman.shadow"

dependencies {

    //implementation files('lib/baritone-api-1.8.3.jar')
    implementation 'com.googlecode.json-simple:json-simple:1.1.1'

}

import net.minecraftforge.forge.tasks.*
apply plugin: 'net.minecraftforge.gradle.patcher'



println(' Java: ' + System.getProperty('java.version') +
        ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ')' +
        ' Arch: ' + System.getProperty('os.arch'))

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

configurations {
    shade
    compile.extendsFrom shade
}

group = 'me.yourname'
version = '1.0.0'

ext {
    apply plugin: 'org.parchmentmc.librarian.forgegradle'
    minecraft_version = '1.18.1'
    mcp_version = '20211210.034407'
    mappings_channel = 'parchment'
    mappings_version = '1.18.1-2022.03.06-1.18.2'
    spi_version = '4.0.10'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'net.minecraftforge:forgespi:' + spi_version
//    Use the shade to add the lib to the jar
//    or use compile if you want to load the lib from the version.json
//    from a maven repo
//    shade 'package-here'
//    compile 'package-here'

}

project(':mcp') {
    apply plugin: 'net.minecraftforge.gradle.mcp'

    mcp {
        config = minecraft_version + '-' + mcp_version
        pipeline = 'joined'
    }
}

evaluationDependsOn(':mcp')

patcher {
    parent = project(':mcp')
    patchedSrc = file('src/main/java')
    mappings channel: 'parchment', version: '1.18.1-2022.03.06-1.18.2'

    mcVersion = minecraft_version
}

jar {
    configurations.shade.each { dep ->
        from(project.zipTree(dep)) {
            exclude 'META-INF', 'META-INF/**'
        }
    }
}
task fatJar(type: Jar) {
    classifier = 'all'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

task runclient(type: JavaExec) {
    group = "MCP"
    description = "Runs the client"
    classpath sourceSets.main.runtimeClasspath
    if (System.getProperty("os.name").toLowerCase().contains("mac")) {
        jvmArgs '-XstartOnFirstThread'
    }
    args '--gameDir', '.'
    args '--version', minecraft_version
    args '--assetsDir', downloadAssets.output
    args '--assetIndex', "1.18"
    args '--accessToken', '0'
    main 'net.minecraft.client.main.Main'
    workingDir 'run'
}


task setup() {
    group = "MCP"
    description = "Setups the dev workspace"
    dependsOn ':extractMapped'
    mkdir 'run/assets'
    copy {
        from downloadAssets.output.path
        into 'run/assets'
    }
}

task copyAssets {
    group = "MCP"
    description = "Download and place the assets into the run folder"
    dependsOn ':downloadAssets'
    mkdir 'run/assets'
    copy {
        from downloadAssets.output.path
        into 'run/assets'
    }
}
